{"version":3,"file":"static/webpack/static/development/pages/_app.js.b81c591cbaa8f97ebf59.hot-update.js","sources":["webpack:///./components/Room.js"],"sourcesContent":["import Participant from \"./Participant\";\nimport React from \"react\";\nimport VideoCall from \"../helpers/simple-peer\";\nimport create from \"@ant-design/icons/lib/components/IconFont\";\nimport { getDisplayStream } from \"../helpers/media-access\";\n\nconst io = require(\"socket.io-client\");\nconst socket = io(process.env.reactAppSignalingServer);\n\nclass Room extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      localStream: {},\n      remoteStreamUrl: \"\",\n      streamUrl: \"\",\n      initiator: false,\n      peer: {},\n      full: false,\n      connecting: false,\n      waiting: true,\n      peerIds: []\n    };\n  }\n  videoCall = new VideoCall();\n  componentDidMount() {\n    const socket = io(process.env.REACT_APP_SIGNALING_SERVER);\n    const component = this;\n    this.setState({ socket });\n    const { roomId } = this.props.match.params;\n    this.getUserMedia().then(() => {\n      socket.emit(\"join\", { roomId: roomId });\n    });\n    socket.on(\"init\", () => {\n      component.setState({ initiator: true });\n    });\n    socket.on(\"ready\", () => {\n      console.log(\"c'est ok on rentre dans \" + roomId);\n      component.enter(roomId);\n    });\n    socket.on(\"desc\", data => {\n      console.log(data);\n      console.log(data.type === \"offer\" && component.state.initiator);\n      console.log(data.type === \"answer\" && !component.state.initiator);\n      if (data.type === \"offer\" && component.state.initiator) return;\n      if (data.type === \"answer\" && !component.state.initiator) return;\n      console.log(\"ok on appelle\");\n      if (component.state.connecting) component.call(data);\n    });\n    socket.on(\"disconnected\", () => {\n      console.log(\"il est parti\");\n      component.setState({ initiator: true });\n    });\n    socket.on(\"full\", () => {\n      console.log(\"c'est plein\");\n      component.setState({ full: true });\n    });\n  }\n  getUserMedia(cb) {\n    return new Promise((resolve, reject) => {\n      navigator.getUserMedia = navigator.getUserMedia =\n        navigator.getUserMedia ||\n        navigator.webkitGetUserMedia ||\n        navigator.mozGetUserMedia;\n      const op = {\n        video: {\n          width: { min: 160, ideal: 640, max: 1280 },\n          height: { min: 120, ideal: 360, max: 720 }\n        },\n        audio: true\n      };\n      navigator.getUserMedia(\n        op,\n        stream => {\n          this.setState({ streamUrl: stream, localStream: stream });\n          this.localVideo.srcObject = stream;\n          resolve();\n        },\n        () => {}\n      );\n    });\n  }\n  getDisplay() {\n    getDisplayStream().then(stream => {\n      stream.oninactive = () => {\n        this.state.peer.removeStream(this.state.localStream);\n        this.getUserMedia().then(() => {\n          this.state.peer.addStream(this.state.localStream);\n        });\n      };\n      this.setState({ streamUrl: stream, localStream: stream });\n      this.localVideo.srcObject = stream;\n      this.state.peer.addStream(stream);\n    });\n  }\n  enter = roomId => {\n    console.log(\"enter in \" + roomId);\n    this.setState({ connecting: true });\n    const peer = this.videoCall.init(\n      this.state.localStream,\n      this.state.initiator\n    );\n    this.setState({ peer });\n    this.state.peerIds.push(peer._id);\n\n    peer.on(\"signal\", data => {\n      console.log(\"signal peer\");\n      const signal = {\n        room: roomId,\n        desc: data\n      };\n      this.state.socket.emit(\"signal\", signal);\n    });\n    peer.on(\"stream\", stream => {\n      console.log(\"stream peer\");\n      this.remoteVideo.srcObject = stream;\n      this.setState({ connecting: false, waiting: false });\n    });\n    peer.on(\"error\", function(err) {\n      console.log(err);\n    });\n  };\n  call = otherId => {\n    console.log(\"callllllll\");\n    this.videoCall.connect(otherId);\n  };\n  renderFull = () => {\n    if (this.state.full) {\n      return \"The room is full\";\n    }\n  };\n  render() {\n    console.log(this.state.peerIds);\n\n    return (\n      <div className=\"room\">\n        <h2>Salle: {roomId}</h2>\n        {connecting && (\n          <div>\n            <p>Establishing connection...</p>\n          </div>\n        )}\n        {waiting && (\n          <div>\n            <p>Waiting for someone...</p>\n          </div>\n        )}\n        <button onClick={handleLogout}>DÃ©connectation :-D</button>\n        {remoteStream !== undefined ? (\n          <Participant\n            isLocal={false}\n            key={remoteStream}\n            video={\n              <div>\n                <video ref={remoteRef} autoPlay={true} />\n              </div>\n            }\n          />\n        ) : (\n          \"\"\n        )}\n        <div className=\"local-participant\">\n          {localStream !== undefined ? (\n            <Participant\n              isLocal={true}\n              key={localStream.id}\n              name={username}\n              video={\n                <div>\n                  <video\n                    autoPlay\n                    id=\"localVideo\"\n                    muted\n                    ref={video => (this.localVideo = video)}\n                  />\n                </div>\n              }\n              setAudioEnabled={setAudioEnabled}\n              audioEnabled={audioEnabled}\n              disableVideo={disableVideo}\n              enableVideo={enableVideo}\n              videoEnabled={videoEnabled}\n              videoEnabled={videoEnabled}\n            />\n          ) : (\n            \"\"\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Room;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AACA;AADA;AAsFA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAhHA;AAiHA;AACA;AAAA;AACA;AACA;AApHA;AAqHA;AACA;AACA;AACA;AACA;AAvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAFA;AAaA;AACA;;;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AALA;AAOA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAGA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;;;AAqCA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAYA;AAAA;AAGA;AACA;AACA;AAEA;AAAA;AAAA;AALA;AAYA;AAAA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAQA;AACA;AACA;AACA;AACA;AAlBA;AA2BA;;;;AArLA;AACA;AAuLA;;;;;A","sourceRoot":""}