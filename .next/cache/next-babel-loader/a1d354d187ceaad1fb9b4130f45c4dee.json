{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Peer from \"simple-peer\";\nexport default class VideoCall {\n  constructor() {\n    _defineProperty(this, \"peer\", null);\n\n    _defineProperty(this, \"init\", (stream, initiator) => {\n      console.log(\"on instancie le peer avec initiator = \" + initiator);\n      peer = new Peer({\n        initiator: initiator,\n        stream: stream,\n        trickle: false,\n        reconnectTimer: 1000,\n        iceTransportPolicy: \"relay\",\n        config: {\n          iceServers: [{\n            urls: process.env.reactAppStunServers.split(\",\")\n          }, {\n            urls: process.env.reactAppTurnServers.split(\",\"),\n            username: process.env.reactAppTurnUsername,\n            credential: process.env.reactAppTurnCredential\n          }]\n        }\n      });\n      return peer;\n    });\n\n    _defineProperty(this, \"connect\", otherId => {\n      this.peer.signal(otherId);\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/julienjuge/DEVPERSO/video-chat/helpers/simple-peer.js"],"names":["Peer","VideoCall","stream","initiator","console","log","peer","trickle","reconnectTimer","iceTransportPolicy","config","iceServers","urls","process","env","reactAppStunServers","split","reactAppTurnServers","username","reactAppTurnUsername","credential","reactAppTurnCredential","otherId","signal"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,aAAjB;AAEA,eAAe,MAAMC,SAAN,CAAgB;AAAA;AAAA,kCACtB,IADsB;;AAAA,kCAEtB,CAACC,MAAD,EAASC,SAAT,KAAuB;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAY,2CAA2CF,SAAvD;AACAG,MAAAA,IAAI,GAAG,IAAIN,IAAJ,CAAS;AACdG,QAAAA,SAAS,EAAEA,SADG;AAEdD,QAAAA,MAAM,EAAEA,MAFM;AAGdK,QAAAA,OAAO,EAAE,KAHK;AAIdC,QAAAA,cAAc,EAAE,IAJF;AAKdC,QAAAA,kBAAkB,EAAE,OALN;AAMdC,QAAAA,MAAM,EAAE;AACNC,UAAAA,UAAU,EAAE,CACV;AAAEC,YAAAA,IAAI,EAAEC,OAAO,CAACC,GAAR,CAAYC,mBAAZ,CAAgCC,KAAhC,CAAsC,GAAtC;AAAR,WADU,EAEV;AACEJ,YAAAA,IAAI,EAAEC,OAAO,CAACC,GAAR,CAAYG,mBAAZ,CAAgCD,KAAhC,CAAsC,GAAtC,CADR;AAEEE,YAAAA,QAAQ,EAAEL,OAAO,CAACC,GAAR,CAAYK,oBAFxB;AAGEC,YAAAA,UAAU,EAAEP,OAAO,CAACC,GAAR,CAAYO;AAH1B,WAFU;AADN;AANM,OAAT,CAAP;AAiBA,aAAOf,IAAP;AACD,KAtB4B;;AAAA,qCAuBnBgB,OAAO,IAAI;AACnB,WAAKhB,IAAL,CAAUiB,MAAV,CAAiBD,OAAjB;AACD,KAzB4B;AAAA;;AAAA","sourcesContent":["import Peer from \"simple-peer\";\n\nexport default class VideoCall {\n  peer = null;\n  init = (stream, initiator) => {\n    console.log(\"on instancie le peer avec initiator = \" + initiator);\n    peer = new Peer({\n      initiator: initiator,\n      stream: stream,\n      trickle: false,\n      reconnectTimer: 1000,\n      iceTransportPolicy: \"relay\",\n      config: {\n        iceServers: [\n          { urls: process.env.reactAppStunServers.split(\",\") },\n          {\n            urls: process.env.reactAppTurnServers.split(\",\"),\n            username: process.env.reactAppTurnUsername,\n            credential: process.env.reactAppTurnCredential\n          }\n        ]\n      }\n    });\n    return peer;\n  };\n  connect = otherId => {\n    this.peer.signal(otherId);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}