{"ast":null,"code":"var _jsxFileName = \"/Users/julienjuge/DEVPERSO/video-chat/components/Room.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport Participant from \"./Participant\";\nimport Video from \"twilio-video\";\nimport VideoCall from \"../helpers/simple-peer\";\nimport { getDisplayStream } from \"../helpers/media-access\";\nimport io from \"socket.io-client\";\n\nconst Room = ({\n  roomId,\n  token,\n  handleLogout\n}) => {\n  const {\n    0: room,\n    1: setRoom\n  } = useState(null);\n  const {\n    0: participants,\n    1: setParticipants\n  } = useState([]);\n  const {\n    0: localStream,\n    1: setLocalStream\n  } = useState();\n  const {\n    0: remoteStreamUrl,\n    1: setRemoteStreamUrl\n  } = useState();\n  const {\n    0: streamUrl,\n    1: setStreamUrl\n  } = useState();\n  const {\n    0: initiator,\n    1: setInitiator\n  } = useState();\n  const {\n    0: peer,\n    1: setPeer\n  } = useState();\n  const {\n    0: full,\n    1: setFull\n  } = useState();\n  const {\n    0: connecting,\n    1: setConnecting\n  } = useState();\n  const {\n    0: waiting,\n    1: setWaiting\n  } = useState();\n  const videoCall = new VideoCall();\n  const remoteParticipants = participants.map(participant => __jsx(Participant, {\n    isLocal: false,\n    key: participant.sid,\n    participant: participant,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }));\n  useEffect(() => {\n    const socket = io(process.env.reactAppSignalingServer);\n    this.setState({\n      socket\n    });\n    this.getUserMedia().then(() => {\n      socket.emit(\"join\", {\n        roomId: roomId\n      });\n    });\n    socket.on(\"init\", () => {\n      setInitiator(true);\n    });\n    socket.on(\"ready\", () => {\n      console.log(\"c'est ok on rentre dans \" + roomId);\n      enter(roomId);\n    });\n    socket.on(\"desc\", data => {\n      if (data.type === \"offer\" && initiator) return;\n      if (data.type === \"answer\" && !initiator) return;\n      call(data);\n    });\n    socket.on(\"disconnected\", () => {\n      console.log(\"il est parti\");\n      setInitiator(true);\n    });\n    socket.on(\"full\", () => {\n      console.log(\"c'est plein\");\n      setFull(true);\n    });\n    /*const participantConnected = participant => {\n      setParticipants(prevParticipants => [...prevParticipants, participant]);\n    };\n    const participantDisconnected = participant => {\n      setParticipants(prevParticipants =>\n        prevParticipants.filter(p => p !== participant)\n      );\n    };\n    Video.connect(token, {\n      name: roomName\n    }).then(room => {\n      setRoom(room);\n      room.on(\"participantConnected\", participantConnected);\n      room.on(\"participantDisconnected\", participantDisconnected);\n      room.participants.forEach(participantConnected);\n    });\n    return () => {\n      setRoom(currentRoom => {\n        if (currentRoom && currentRoom.localParticipant.state === \"connected\") {\n          currentRoom.localParticipant.tracks.forEach(function(\n            trackPublication\n          ) {\n            trackPublication.track.stop();\n          });\n          currentRoom.disconnect();\n          return null;\n        } else {\n          return currentRoom;\n        }\n      });\n    };*/\n  }, []);\n\n  const enter = roomId => {\n    setConnecting(true);\n    const peer = this.videoCall.init(this.state.localStream, this.state.initiator);\n    setPeer(peer);\n    peer.on(\"signal\", data => {\n      const signal = {\n        room: roomId,\n        desc: data\n      };\n      this.state.socket.emit(\"signal\", signal);\n    });\n    peer.on(\"stream\", stream => {\n      console.log(stream);\n      this.remoteVideo.srcObject = stream;\n      this.setState({\n        connecting: false,\n        waiting: false\n      });\n    });\n    peer.on(\"error\", function (err) {\n      console.log(err);\n    });\n  };\n\n  const call = otherId => {\n    this.videoCall.connect(otherId);\n  };\n\n  const renderFull = () => {\n    if (this.state.full) {\n      return \"The room is full\";\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: \"room\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, \"Salle: \", roomId), __jsx(\"button\", {\n    onClick: handleLogout,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, \"D\\xE9connectation :-D\"), remoteParticipants, __jsx(\"div\", {\n    className: \"local-participant\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, room ? __jsx(Participant, {\n    isLocal: true,\n    key: room.localParticipant.sid,\n    participant: room.localParticipant,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }) : \"\"));\n};\n\nexport default Room;","map":{"version":3,"sources":["/Users/julienjuge/DEVPERSO/video-chat/components/Room.js"],"names":["React","useEffect","useState","Participant","Video","VideoCall","getDisplayStream","io","Room","roomId","token","handleLogout","room","setRoom","participants","setParticipants","localStream","setLocalStream","remoteStreamUrl","setRemoteStreamUrl","streamUrl","setStreamUrl","initiator","setInitiator","peer","setPeer","full","setFull","connecting","setConnecting","waiting","setWaiting","videoCall","remoteParticipants","map","participant","sid","socket","process","env","reactAppSignalingServer","setState","getUserMedia","then","emit","on","console","log","enter","data","type","call","init","state","signal","desc","stream","remoteVideo","srcObject","err","otherId","connect","renderFull","localParticipant"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport Participant from \"./Participant\";\nimport Video from \"twilio-video\";\nimport VideoCall from \"../helpers/simple-peer\";\nimport { getDisplayStream } from \"../helpers/media-access\";\nimport io from \"socket.io-client\";\n\nconst Room = ({ roomId, token, handleLogout }) => {\n  const [room, setRoom] = useState(null);\n  const [participants, setParticipants] = useState([]);\n  const [localStream, setLocalStream] = useState();\n  const [remoteStreamUrl, setRemoteStreamUrl] = useState();\n  const [streamUrl, setStreamUrl] = useState();\n  const [initiator, setInitiator] = useState();\n  const [peer, setPeer] = useState();\n  const [full, setFull] = useState();\n  const [connecting, setConnecting] = useState();\n  const [waiting, setWaiting] = useState();\n  const videoCall = new VideoCall();\n\n  const remoteParticipants = participants.map(participant => (\n    <Participant\n      isLocal={false}\n      key={participant.sid}\n      participant={participant}\n    />\n  ));\n\n  useEffect(() => {\n    const socket = io(process.env.reactAppSignalingServer);\n\n    this.setState({ socket });\n\n    this.getUserMedia().then(() => {\n      socket.emit(\"join\", { roomId: roomId });\n    });\n    socket.on(\"init\", () => {\n      setInitiator(true);\n    });\n    socket.on(\"ready\", () => {\n      console.log(\"c'est ok on rentre dans \" + roomId);\n      enter(roomId);\n    });\n    socket.on(\"desc\", data => {\n      if (data.type === \"offer\" && initiator) return;\n      if (data.type === \"answer\" && !initiator) return;\n      call(data);\n    });\n    socket.on(\"disconnected\", () => {\n      console.log(\"il est parti\");\n      setInitiator(true);\n    });\n    socket.on(\"full\", () => {\n      console.log(\"c'est plein\");\n      setFull(true);\n    });\n\n    /*const participantConnected = participant => {\n      setParticipants(prevParticipants => [...prevParticipants, participant]);\n    };\n    const participantDisconnected = participant => {\n      setParticipants(prevParticipants =>\n        prevParticipants.filter(p => p !== participant)\n      );\n    };\n    Video.connect(token, {\n      name: roomName\n    }).then(room => {\n      setRoom(room);\n      room.on(\"participantConnected\", participantConnected);\n      room.on(\"participantDisconnected\", participantDisconnected);\n      room.participants.forEach(participantConnected);\n    });\n    return () => {\n      setRoom(currentRoom => {\n        if (currentRoom && currentRoom.localParticipant.state === \"connected\") {\n          currentRoom.localParticipant.tracks.forEach(function(\n            trackPublication\n          ) {\n            trackPublication.track.stop();\n          });\n          currentRoom.disconnect();\n          return null;\n        } else {\n          return currentRoom;\n        }\n      });\n    };*/\n  }, []);\n\n  const enter = roomId => {\n    setConnecting(true);\n    const peer = this.videoCall.init(\n      this.state.localStream,\n      this.state.initiator\n    );\n    setPeer(peer);\n\n    peer.on(\"signal\", data => {\n      const signal = {\n        room: roomId,\n        desc: data\n      };\n      this.state.socket.emit(\"signal\", signal);\n    });\n    peer.on(\"stream\", stream => {\n      console.log(stream);\n      this.remoteVideo.srcObject = stream;\n      this.setState({ connecting: false, waiting: false });\n    });\n    peer.on(\"error\", function(err) {\n      console.log(err);\n    });\n  };\n  const call = otherId => {\n    this.videoCall.connect(otherId);\n  };\n  const renderFull = () => {\n    if (this.state.full) {\n      return \"The room is full\";\n    }\n  };\n\n  return (\n    <div className=\"room\">\n      <h2>Salle: {roomId}</h2>\n      <button onClick={handleLogout}>Déconnectation :-D</button>\n      {remoteParticipants}\n      <div className=\"local-participant\">\n        {room ? (\n          <Participant\n            isLocal={true}\n            key={room.localParticipant.sid}\n            participant={room.localParticipant}\n          />\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Room;\n"]},"metadata":{},"sourceType":"module"}