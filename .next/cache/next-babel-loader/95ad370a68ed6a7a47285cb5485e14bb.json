{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { createRef, useEffect, useRef, useState } from \"react\";\nimport Participant from \"./Participant\";\nimport SimplePeer from \"simple-peer\";\nimport Video from \"twilio-video\";\nimport VideoCall from \"../helpers/simple-peer\";\nimport { getDisplayStream } from \"../helpers/media-access\";\n\nconst io = require(\"socket.io-client\");\n\nconst socket = io(process.env.reactAppSignalingServer);\n\nconst Room = ({\n  username,\n  roomId,\n  token,\n  handleLogout\n}) => {\n  const {\n    0: room,\n    1: setRoom\n  } = useState(null);\n  const {\n    0: participants,\n    1: setParticipants\n  } = useState([]);\n  const {\n    0: localStream,\n    1: setLocalStream\n  } = useState();\n  const {\n    0: remoteStreamUrl,\n    1: setRemoteStreamUrl\n  } = useState([]);\n  const {\n    0: streamUrl,\n    1: setStreamUrl\n  } = useState();\n  const {\n    0: initiator,\n    1: setInitiator\n  } = useState(false);\n  const {\n    0: peer,\n    1: setPeer\n  } = useState();\n  const {\n    0: full,\n    1: setFull\n  } = useState();\n  const {\n    0: connecting,\n    1: setConnecting\n  } = useState();\n  const {\n    0: waiting,\n    1: setWaiting\n  } = useState();\n  const {\n    0: localVideo,\n    1: setLocalVideo\n  } = useState();\n  const {\n    0: audioEnabled,\n    1: setAudioEnabled\n  } = useState(false);\n  const {\n    0: videoEnabled,\n    1: setVideoEnabled\n  } = useState(true);\n  const {\n    0: remoteStreams,\n    1: setRemoteStreams\n  } = useState([]);\n  const refs = useRef([]);\n  const videoCall = new VideoCall();\n  const videoRef = useRef();\n  const audioRef = useRef();\n  const remoteParticipants = remoteStreams.map(stream => {\n    const remoteRef = useRef();\n    console.log(stream);\n    remoteRef.current.srcObject = stream;\n    return __jsx(Participant, {\n      isLocal: false,\n      key: stream,\n      video: __jsx(\"div\", null, __jsx(\"video\", {\n        ref: remoteRef,\n        autoPlay: true\n      }))\n    });\n  });\n  useEffect(() => {\n    console.log(socket);\n    getUserMedia().then(() => {\n      console.log(\"join\");\n      socket.emit(\"join\", {\n        roomId: roomId\n      });\n      console.log(\"emit join\");\n    });\n    socket.on(\"init\", () => {\n      console.log(\"init\");\n      setInitiator(true);\n      console.log(initiator);\n    });\n    socket.on(\"ready\", () => {\n      console.log(\"c'est ok on rentre dans \" + roomId);\n      console.log(initiator);\n      enter(roomId);\n    });\n    socket.on(\"desc\", data => {\n      console.log(\"desc\");\n      if (data.type === \"offer\" && initiator) return;\n      if (data.type === \"answer\" && !initiator) return;\n      call(data);\n    });\n    socket.on(\"disconnected\", () => {\n      console.log(\"il est parti\");\n      setInitiator(true);\n    });\n    socket.on(\"full\", () => {\n      console.log(\"c'est plein\");\n      setFull(true);\n    });\n    /*const participantConnected = participant => {\n      setParticipants(prevParticipants => [...prevParticipants, participant]);\n    };\n    const participantDisconnected = participant => {\n      setParticipants(prevParticipants =>\n        prevParticipants.filter(p => p !== participant)\n      );\n    };\n    Video.connect(token, {\n      name: roomName\n    }).then(room => {\n      setRoom(room);\n      room.on(\"participantConnected\", participantConnected);\n      room.on(\"participantDisconnected\", participantDisconnected);\n      room.participants.forEach(participantConnected);\n    });\n    return () => {\n      setRoom(currentRoom => {\n        if (currentRoom && currentRoom.localParticipant.state === \"connected\") {\n          currentRoom.localParticipant.tracks.forEach(function(\n            trackPublication\n          ) {\n            trackPublication.track.stop();\n          });\n          currentRoom.disconnect();\n          return null;\n        } else {\n          return currentRoom;\n        }\n      });\n    };*/\n  }, [initiator]);\n\n  const getUserMedia = cb => {\n    return new Promise((resolve, reject) => {\n      navigator.getUserMedia = navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n      const op = {\n        audio: true,\n        video: true\n      };\n      navigator.getUserMedia(op, stream => {\n        console.log(op);\n        console.log(stream);\n        setStreamUrl(stream);\n        setLocalStream(stream);\n        setLocalVideo(stream);\n        videoRef.current.srcObject = stream; //stream.srcObject.attach(videoRef);\n\n        resolve();\n      }, () => {});\n    });\n  };\n\n  const getDisplay = () => {\n    getDisplayStream().then(stream => {\n      stream.oninactive = () => {\n        this.state.peer.removeStream(this.state.localStream);\n        this.getUserMedia().then(() => {\n          this.state.peer.addStream(this.state.localStream);\n        });\n      };\n\n      setStreamUrl(stream);\n      setLocalStream(stream);\n      localVideo.srcObject = stream;\n      peer.addStream(stream);\n    });\n  };\n\n  const enter = roomId => {\n    console.log(\"enter in \" + roomId);\n    setConnecting(true);\n    const peer = videoCall.init(localStream, initiator);\n    setPeer({\n      peer\n    });\n    peer.on(\"signal\", data => {\n      console.log(\"signal peer\");\n      const signal = {\n        room: roomId,\n        desc: data\n      };\n      socket.emit(\"signal\", signal);\n    });\n    peer.on(\"stream\", stream => {\n      console.log(\"stream peer\");\n      let streams = remoteStreams;\n      console.log(stream);\n      streams.push(stream);\n      setRemoteStreams(streams);\n      refs.push(createRef()); //this.remoteVideo.srcObject = stream;\n\n      setConnecting(false);\n      setWaiting(false);\n    });\n    peer.on(\"error\", function (err) {\n      console.log(err);\n    });\n  };\n\n  const call = otherId => {\n    videoCall.connect(otherId);\n  };\n\n  const renderFull = () => {\n    if (this.state.full) {\n      return \"The room is full\";\n    }\n  };\n\n  const disableVideo = () => {\n    const videoTrack = localStream.getVideoTracks()[0];\n\n    if (localStream) {\n      videoTrack.enabled = false;\n      setVideoEnabled(false);\n    }\n  };\n\n  const enableVideo = () => {\n    const videoTrack = localStream.getVideoTracks()[0];\n\n    if (localStream) {\n      videoTrack.enabled = true;\n      setVideoEnabled(true);\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: \"room\"\n  }, __jsx(\"h2\", null, \"Salle: \", roomId), connecting && __jsx(\"div\", null, __jsx(\"p\", null, \"Establishing connection...\")), waiting && __jsx(\"div\", null, __jsx(\"p\", null, \"Waiting for someone...\")), __jsx(\"button\", {\n    onClick: handleLogout\n  }, \"D\\xE9connectation :-D\"), remoteParticipants, __jsx(\"div\", {\n    className: \"local-participant\"\n  }, localStream !== undefined ? __jsx(Participant, {\n    isLocal: true,\n    key: localStream.id,\n    name: username,\n    video: __jsx(\"div\", null, __jsx(\"video\", {\n      ref: videoRef,\n      autoPlay: true,\n      muted: !audioEnabled\n    })),\n    setAudioEnabled: setAudioEnabled,\n    audioEnabled: audioEnabled,\n    disableVideo: disableVideo,\n    enableVideo: enableVideo,\n    videoEnabled: videoEnabled,\n    videoEnabled: videoEnabled\n  }) : \"\"));\n};\n\nexport default Room;","map":{"version":3,"sources":["/Users/julienjuge/DEVPERSO/video-chat/components/Room.js"],"names":["React","createRef","useEffect","useRef","useState","Participant","SimplePeer","Video","VideoCall","getDisplayStream","io","require","socket","process","env","reactAppSignalingServer","Room","username","roomId","token","handleLogout","room","setRoom","participants","setParticipants","localStream","setLocalStream","remoteStreamUrl","setRemoteStreamUrl","streamUrl","setStreamUrl","initiator","setInitiator","peer","setPeer","full","setFull","connecting","setConnecting","waiting","setWaiting","localVideo","setLocalVideo","audioEnabled","setAudioEnabled","videoEnabled","setVideoEnabled","remoteStreams","setRemoteStreams","refs","videoCall","videoRef","audioRef","remoteParticipants","map","stream","remoteRef","console","log","current","srcObject","getUserMedia","then","emit","on","enter","data","type","call","cb","Promise","resolve","reject","navigator","webkitGetUserMedia","mozGetUserMedia","op","audio","video","getDisplay","oninactive","state","removeStream","addStream","init","signal","desc","streams","push","err","otherId","connect","renderFull","disableVideo","videoTrack","getVideoTracks","enabled","enableVideo","undefined","id"],"mappings":"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","sourcesContent":["import React, { createRef, useEffect, useRef, useState } from \"react\";\n\nimport Participant from \"./Participant\";\nimport SimplePeer from \"simple-peer\";\nimport Video from \"twilio-video\";\nimport VideoCall from \"../helpers/simple-peer\";\nimport { getDisplayStream } from \"../helpers/media-access\";\n\nconst io = require(\"socket.io-client\");\nconst socket = io(process.env.reactAppSignalingServer);\n\nconst Room = ({ username, roomId, token, handleLogout }) => {\n  const [room, setRoom] = useState(null);\n  const [participants, setParticipants] = useState([]);\n  const [localStream, setLocalStream] = useState();\n  const [remoteStreamUrl, setRemoteStreamUrl] = useState([]);\n  const [streamUrl, setStreamUrl] = useState();\n  const [initiator, setInitiator] = useState(false);\n  const [peer, setPeer] = useState();\n  const [full, setFull] = useState();\n  const [connecting, setConnecting] = useState();\n  const [waiting, setWaiting] = useState();\n  const [localVideo, setLocalVideo] = useState();\n  const [audioEnabled, setAudioEnabled] = useState(false);\n  const [videoEnabled, setVideoEnabled] = useState(true);\n  const [remoteStreams, setRemoteStreams] = useState([]);\n  const refs = useRef([]);\n\n  const videoCall = new VideoCall();\n  const videoRef = useRef();\n  const audioRef = useRef();\n\n  const remoteParticipants = remoteStreams.map(stream => {\n    const remoteRef = useRef();\n    console.log(stream);\n    remoteRef.current.srcObject = stream;\n    return (\n      <Participant\n        isLocal={false}\n        key={stream}\n        video={\n          <div>\n            <video ref={remoteRef} autoPlay={true} />\n          </div>\n        }\n      />\n    );\n  });\n  useEffect(() => {\n    console.log(socket);\n    getUserMedia().then(() => {\n      console.log(\"join\");\n      socket.emit(\"join\", { roomId: roomId });\n\n      console.log(\"emit join\");\n    });\n\n    socket.on(\"init\", () => {\n      console.log(\"init\");\n      setInitiator(true);\n      console.log(initiator);\n    });\n    socket.on(\"ready\", () => {\n      console.log(\"c'est ok on rentre dans \" + roomId);\n      console.log(initiator);\n      enter(roomId);\n    });\n    socket.on(\"desc\", data => {\n      console.log(\"desc\");\n      if (data.type === \"offer\" && initiator) return;\n      if (data.type === \"answer\" && !initiator) return;\n      call(data);\n    });\n    socket.on(\"disconnected\", () => {\n      console.log(\"il est parti\");\n      setInitiator(true);\n    });\n    socket.on(\"full\", () => {\n      console.log(\"c'est plein\");\n      setFull(true);\n    });\n\n    /*const participantConnected = participant => {\n      setParticipants(prevParticipants => [...prevParticipants, participant]);\n    };\n    const participantDisconnected = participant => {\n      setParticipants(prevParticipants =>\n        prevParticipants.filter(p => p !== participant)\n      );\n    };\n    Video.connect(token, {\n      name: roomName\n    }).then(room => {\n      setRoom(room);\n      room.on(\"participantConnected\", participantConnected);\n      room.on(\"participantDisconnected\", participantDisconnected);\n      room.participants.forEach(participantConnected);\n    });\n    return () => {\n      setRoom(currentRoom => {\n        if (currentRoom && currentRoom.localParticipant.state === \"connected\") {\n          currentRoom.localParticipant.tracks.forEach(function(\n            trackPublication\n          ) {\n            trackPublication.track.stop();\n          });\n          currentRoom.disconnect();\n          return null;\n        } else {\n          return currentRoom;\n        }\n      });\n    };*/\n  }, [initiator]);\n\n  const getUserMedia = cb => {\n    return new Promise((resolve, reject) => {\n      navigator.getUserMedia = navigator.getUserMedia =\n        navigator.getUserMedia ||\n        navigator.webkitGetUserMedia ||\n        navigator.mozGetUserMedia;\n      const op = {\n        audio: true,\n        video: true\n      };\n      navigator.getUserMedia(\n        op,\n        stream => {\n          console.log(op);\n          console.log(stream);\n          setStreamUrl(stream);\n          setLocalStream(stream);\n          setLocalVideo(stream);\n          videoRef.current.srcObject = stream;\n\n          //stream.srcObject.attach(videoRef);\n          resolve();\n        },\n        () => {}\n      );\n    });\n  };\n  const getDisplay = () => {\n    getDisplayStream().then(stream => {\n      stream.oninactive = () => {\n        this.state.peer.removeStream(this.state.localStream);\n        this.getUserMedia().then(() => {\n          this.state.peer.addStream(this.state.localStream);\n        });\n      };\n      setStreamUrl(stream);\n      setLocalStream(stream);\n      localVideo.srcObject = stream;\n      peer.addStream(stream);\n    });\n  };\n\n  const enter = roomId => {\n    console.log(\"enter in \" + roomId);\n    setConnecting(true);\n    const peer = videoCall.init(localStream, initiator);\n    setPeer({ peer });\n\n    peer.on(\"signal\", data => {\n      console.log(\"signal peer\");\n      const signal = {\n        room: roomId,\n        desc: data\n      };\n      socket.emit(\"signal\", signal);\n    });\n    peer.on(\"stream\", stream => {\n      console.log(\"stream peer\");\n      let streams = remoteStreams;\n      console.log(stream);\n      streams.push(stream);\n      setRemoteStreams(streams);\n      refs.push(createRef());\n      //this.remoteVideo.srcObject = stream;\n      setConnecting(false);\n      setWaiting(false);\n    });\n    peer.on(\"error\", function(err) {\n      console.log(err);\n    });\n  };\n\n  const call = otherId => {\n    videoCall.connect(otherId);\n  };\n  const renderFull = () => {\n    if (this.state.full) {\n      return \"The room is full\";\n    }\n  };\n\n  const disableVideo = () => {\n    const videoTrack = localStream.getVideoTracks()[0];\n\n    if (localStream) {\n      videoTrack.enabled = false;\n      setVideoEnabled(false);\n    }\n  };\n\n  const enableVideo = () => {\n    const videoTrack = localStream.getVideoTracks()[0];\n\n    if (localStream) {\n      videoTrack.enabled = true;\n      setVideoEnabled(true);\n    }\n  };\n\n  return (\n    <div className=\"room\">\n      <h2>Salle: {roomId}</h2>\n      {connecting && (\n        <div>\n          <p>Establishing connection...</p>\n        </div>\n      )}\n      {waiting && (\n        <div>\n          <p>Waiting for someone...</p>\n        </div>\n      )}\n      <button onClick={handleLogout}>Déconnectation :-D</button>\n      {remoteParticipants}\n      <div className=\"local-participant\">\n        {localStream !== undefined ? (\n          <Participant\n            isLocal={true}\n            key={localStream.id}\n            name={username}\n            video={\n              <div>\n                <video ref={videoRef} autoPlay={true} muted={!audioEnabled} />\n              </div>\n            }\n            setAudioEnabled={setAudioEnabled}\n            audioEnabled={audioEnabled}\n            disableVideo={disableVideo}\n            enableVideo={enableVideo}\n            videoEnabled={videoEnabled}\n            videoEnabled={videoEnabled}\n          />\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Room;\n"]},"metadata":{},"sourceType":"module"}