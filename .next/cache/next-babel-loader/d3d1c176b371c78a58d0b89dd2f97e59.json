{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Participant from \"./Participant\";\nimport Video from \"twilio-video\";\nimport VideoCall from \"../helpers/simple-peer\";\nimport { getDisplayStream } from \"../helpers/media-access\";\n\nconst io = require(\"socket.io-client\");\n\nconst socket = io(\"http://localhost:3000\");\n\nconst Room = ({\n  roomId,\n  token,\n  handleLogout\n}) => {\n  const {\n    0: room,\n    1: setRoom\n  } = useState(null);\n  const {\n    0: participants,\n    1: setParticipants\n  } = useState([]);\n  const {\n    0: localStream,\n    1: setLocalStream\n  } = useState();\n  const {\n    0: remoteStreamUrl,\n    1: setRemoteStreamUrl\n  } = useState();\n  const {\n    0: streamUrl,\n    1: setStreamUrl\n  } = useState();\n  const {\n    0: initiator,\n    1: setInitiator\n  } = useState();\n  const {\n    0: peer,\n    1: setPeer\n  } = useState();\n  const {\n    0: full,\n    1: setFull\n  } = useState();\n  const {\n    0: connecting,\n    1: setConnecting\n  } = useState();\n  const {\n    0: waiting,\n    1: setWaiting\n  } = useState();\n  const {\n    0: socket,\n    1: setSocket\n  } = useState();\n  const {\n    0: localVideo,\n    1: setLocalVideo\n  } = useState();\n  const videoCall = new VideoCall();\n  const videoRef = useRef();\n  const audioRef = useRef();\n  const remoteParticipants = participants.map(participant => __jsx(Participant, {\n    isLocal: false,\n    key: participant.sid,\n    participant: participant\n  }));\n  useEffect(() => {\n    const socket = io(process.env.reactAppSignalingServer);\n    console.log(socket);\n    setSocket(socket);\n    getUserMedia().then(() => {\n      console.log(\"join\");\n      socket.emit(\"join\", {\n        roomId: roomId\n      });\n      console.log(\"emit join\");\n    });\n    socket.on(\"init\", () => {\n      console.log(\"init\");\n      setInitiator(true);\n    });\n    socket.on(\"ready\", () => {\n      console.log(\"c'est ok on rentre dans \" + roomId);\n      enter(roomId);\n    });\n    socket.on(\"desc\", data => {\n      console.log(\"desc\");\n      if (data.type === \"offer\" && initiator) return;\n      if (data.type === \"answer\" && !initiator) return;\n      call(data);\n    });\n    socket.on(\"disconnected\", () => {\n      console.log(\"il est parti\");\n      setInitiator(true);\n    });\n    socket.on(\"full\", () => {\n      console.log(\"c'est plein\");\n      setFull(true);\n    });\n    /*const participantConnected = participant => {\n      setParticipants(prevParticipants => [...prevParticipants, participant]);\n    };\n    const participantDisconnected = participant => {\n      setParticipants(prevParticipants =>\n        prevParticipants.filter(p => p !== participant)\n      );\n    };\n    Video.connect(token, {\n      name: roomName\n    }).then(room => {\n      setRoom(room);\n      room.on(\"participantConnected\", participantConnected);\n      room.on(\"participantDisconnected\", participantDisconnected);\n      room.participants.forEach(participantConnected);\n    });\n    return () => {\n      setRoom(currentRoom => {\n        if (currentRoom && currentRoom.localParticipant.state === \"connected\") {\n          currentRoom.localParticipant.tracks.forEach(function(\n            trackPublication\n          ) {\n            trackPublication.track.stop();\n          });\n          currentRoom.disconnect();\n          return null;\n        } else {\n          return currentRoom;\n        }\n      });\n    };*/\n  }, []);\n\n  const getUserMedia = cb => {\n    return new Promise((resolve, reject) => {\n      navigator.getUserMedia = navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n      const op = {\n        audio: true,\n        video: true\n      };\n      navigator.getUserMedia(op, stream => {\n        console.log(op);\n        console.log(stream);\n        setStreamUrl(stream);\n        setLocalStream(stream);\n        setLocalVideo(stream);\n        console.log(videoRef.current);\n        videoRef.current.scrObject = stream;\n        console.log(videoRef.current); //stream.srcObject.attach(videoRef);\n\n        resolve();\n      }, () => {});\n    });\n  };\n\n  const getDisplay = () => {\n    getDisplayStream().then(stream => {\n      stream.oninactive = () => {\n        this.state.peer.removeStream(this.state.localStream);\n        this.getUserMedia().then(() => {\n          this.state.peer.addStream(this.state.localStream);\n        });\n      };\n\n      setStreamUrl(stream);\n      setLocalStream(stream);\n      localVideo.srcObject = stream;\n      peer.addStream(stream);\n    });\n  };\n\n  const enter = roomId => {\n    console.log(roomId);\n    console.log(\"enter\");\n    setConnecting(true);\n    const peer = videoCall.init(localStream, initiator);\n    console.log(peer);\n    setPeer(peer);\n    peer.on(\"signal\", data => {\n      console.log(\"signal\");\n      const signal = {\n        room: roomId,\n        desc: data\n      };\n      socket.emit(\"signal\", signal);\n    });\n    peer.on(\"stream\", stream => {\n      console.log(\"stream\");\n      console.log(stream); //remoteVideo.srcObject = stream;\n\n      setConnecting(false);\n      setWaiting(false);\n    });\n    peer.on(\"error\", function (err) {\n      console.log(err);\n    });\n  };\n\n  const call = otherId => {\n    videoCall.connect(otherId);\n  };\n\n  const renderFull = () => {\n    if (this.state.full) {\n      return \"The room is full\";\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: \"room\"\n  }, __jsx(\"h2\", null, \"Salle: \", roomId), __jsx(\"button\", {\n    onClick: handleLogout\n  }, \"D\\xE9connectation :-D\"), remoteParticipants, __jsx(\"div\", {\n    className: \"local-participant\"\n  }, localStream !== undefined ? __jsx(\"video\", {\n    ref: videoRef,\n    autoPlay: true\n  }) : \"\"));\n};\n\nexport default Room;","map":{"version":3,"sources":["/Users/julienjuge/DEVPERSO/video-chat/components/Room.js"],"names":["React","useEffect","useRef","useState","Participant","Video","VideoCall","getDisplayStream","io","require","socket","Room","roomId","token","handleLogout","room","setRoom","participants","setParticipants","localStream","setLocalStream","remoteStreamUrl","setRemoteStreamUrl","streamUrl","setStreamUrl","initiator","setInitiator","peer","setPeer","full","setFull","connecting","setConnecting","waiting","setWaiting","setSocket","localVideo","setLocalVideo","videoCall","videoRef","audioRef","remoteParticipants","map","participant","sid","process","env","reactAppSignalingServer","console","log","getUserMedia","then","emit","on","enter","data","type","call","cb","Promise","resolve","reject","navigator","webkitGetUserMedia","mozGetUserMedia","op","audio","video","stream","current","scrObject","getDisplay","oninactive","state","removeStream","addStream","srcObject","init","signal","desc","err","otherId","connect","renderFull","undefined"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\nimport Participant from \"./Participant\";\nimport Video from \"twilio-video\";\nimport VideoCall from \"../helpers/simple-peer\";\nimport { getDisplayStream } from \"../helpers/media-access\";\n\nconst io = require(\"socket.io-client\");\nconst socket = io(\"http://localhost:3000\");\n\nconst Room = ({ roomId, token, handleLogout }) => {\n  const [room, setRoom] = useState(null);\n  const [participants, setParticipants] = useState([]);\n  const [localStream, setLocalStream] = useState();\n  const [remoteStreamUrl, setRemoteStreamUrl] = useState();\n  const [streamUrl, setStreamUrl] = useState();\n  const [initiator, setInitiator] = useState();\n  const [peer, setPeer] = useState();\n  const [full, setFull] = useState();\n  const [connecting, setConnecting] = useState();\n  const [waiting, setWaiting] = useState();\n  const [socket, setSocket] = useState();\n  const [localVideo, setLocalVideo] = useState();\n\n  const videoCall = new VideoCall();\n  const videoRef = useRef();\n  const audioRef = useRef();\n\n  const remoteParticipants = participants.map(participant => (\n    <Participant\n      isLocal={false}\n      key={participant.sid}\n      participant={participant}\n    />\n  ));\n\n  useEffect(() => {\n    const socket = io(process.env.reactAppSignalingServer);\n    console.log(socket);\n    setSocket(socket);\n\n    getUserMedia().then(() => {\n      console.log(\"join\");\n      socket.emit(\"join\", { roomId: roomId });\n\n      console.log(\"emit join\");\n    });\n    socket.on(\"init\", () => {\n      console.log(\"init\");\n      setInitiator(true);\n    });\n    socket.on(\"ready\", () => {\n      console.log(\"c'est ok on rentre dans \" + roomId);\n      enter(roomId);\n    });\n    socket.on(\"desc\", data => {\n      console.log(\"desc\");\n      if (data.type === \"offer\" && initiator) return;\n      if (data.type === \"answer\" && !initiator) return;\n      call(data);\n    });\n    socket.on(\"disconnected\", () => {\n      console.log(\"il est parti\");\n      setInitiator(true);\n    });\n    socket.on(\"full\", () => {\n      console.log(\"c'est plein\");\n      setFull(true);\n    });\n\n    /*const participantConnected = participant => {\n      setParticipants(prevParticipants => [...prevParticipants, participant]);\n    };\n    const participantDisconnected = participant => {\n      setParticipants(prevParticipants =>\n        prevParticipants.filter(p => p !== participant)\n      );\n    };\n    Video.connect(token, {\n      name: roomName\n    }).then(room => {\n      setRoom(room);\n      room.on(\"participantConnected\", participantConnected);\n      room.on(\"participantDisconnected\", participantDisconnected);\n      room.participants.forEach(participantConnected);\n    });\n    return () => {\n      setRoom(currentRoom => {\n        if (currentRoom && currentRoom.localParticipant.state === \"connected\") {\n          currentRoom.localParticipant.tracks.forEach(function(\n            trackPublication\n          ) {\n            trackPublication.track.stop();\n          });\n          currentRoom.disconnect();\n          return null;\n        } else {\n          return currentRoom;\n        }\n      });\n    };*/\n  }, []);\n\n  const getUserMedia = cb => {\n    return new Promise((resolve, reject) => {\n      navigator.getUserMedia = navigator.getUserMedia =\n        navigator.getUserMedia ||\n        navigator.webkitGetUserMedia ||\n        navigator.mozGetUserMedia;\n      const op = {\n        audio: true,\n        video: true\n      };\n      navigator.getUserMedia(\n        op,\n        stream => {\n          console.log(op);\n          console.log(stream);\n          setStreamUrl(stream);\n          setLocalStream(stream);\n          setLocalVideo(stream);\n          console.log(videoRef.current);\n          videoRef.current.scrObject = stream;\n          console.log(videoRef.current);\n          //stream.srcObject.attach(videoRef);\n          resolve();\n        },\n        () => {}\n      );\n    });\n  };\n  const getDisplay = () => {\n    getDisplayStream().then(stream => {\n      stream.oninactive = () => {\n        this.state.peer.removeStream(this.state.localStream);\n        this.getUserMedia().then(() => {\n          this.state.peer.addStream(this.state.localStream);\n        });\n      };\n      setStreamUrl(stream);\n      setLocalStream(stream);\n      localVideo.srcObject = stream;\n      peer.addStream(stream);\n    });\n  };\n\n  const enter = roomId => {\n    console.log(roomId);\n    console.log(\"enter\");\n    setConnecting(true);\n    const peer = videoCall.init(localStream, initiator);\n    console.log(peer);\n    setPeer(peer);\n\n    peer.on(\"signal\", data => {\n      console.log(\"signal\");\n      const signal = {\n        room: roomId,\n        desc: data\n      };\n      socket.emit(\"signal\", signal);\n    });\n    peer.on(\"stream\", stream => {\n      console.log(\"stream\");\n      console.log(stream);\n      //remoteVideo.srcObject = stream;\n      setConnecting(false);\n      setWaiting(false);\n    });\n    peer.on(\"error\", function(err) {\n      console.log(err);\n    });\n  };\n  const call = otherId => {\n    videoCall.connect(otherId);\n  };\n  const renderFull = () => {\n    if (this.state.full) {\n      return \"The room is full\";\n    }\n  };\n\n  return (\n    <div className=\"room\">\n      <h2>Salle: {roomId}</h2>\n      <button onClick={handleLogout}>Déconnectation :-D</button>\n      {remoteParticipants}\n      <div className=\"local-participant\">\n        {localStream !== undefined ? (\n          <video ref={videoRef} autoPlay={true} />\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Room;\n"]},"metadata":{},"sourceType":"module"}