{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport Participant from \"./Participant\";\nimport Video from \"twilio-video\";\nimport VideoCall from \"../helpers/simple-peer\";\nimport { getDisplayStream } from \"../helpers/media-access\";\n\nconst io = require(\"socket.io-client\");\n\nconst socket = io(\"http://localhost:3000\");\n\nconst Room = ({\n  roomId,\n  token,\n  handleLogout\n}) => {\n  const {\n    0: room,\n    1: setRoom\n  } = useState(null);\n  const {\n    0: participants,\n    1: setParticipants\n  } = useState([]);\n  const {\n    0: localStream,\n    1: setLocalStream\n  } = useState();\n  const {\n    0: remoteStreamUrl,\n    1: setRemoteStreamUrl\n  } = useState();\n  const {\n    0: streamUrl,\n    1: setStreamUrl\n  } = useState();\n  const {\n    0: initiator,\n    1: setInitiator\n  } = useState();\n  const {\n    0: peer,\n    1: setPeer\n  } = useState();\n  const {\n    0: full,\n    1: setFull\n  } = useState();\n  const {\n    0: connecting,\n    1: setConnecting\n  } = useState();\n  const {\n    0: waiting,\n    1: setWaiting\n  } = useState();\n  const {\n    0: socket,\n    1: setSocket\n  } = useState();\n  const {\n    0: localVideo,\n    1: setLocalVideo\n  } = useState();\n  const videoCall = new VideoCall();\n  const remoteParticipants = participants.map(participant => __jsx(Participant, {\n    isLocal: false,\n    key: participant.sid,\n    participant: participant\n  }));\n  useEffect(() => {\n    setSocket(socket);\n    getUserMedia().then(() => {\n      socket.emit(\"join\", {\n        roomId: roomId\n      });\n    });\n    socket.on(\"init\", () => {\n      setInitiator(true);\n    });\n    socket.on(\"ready\", () => {\n      console.log(\"c'est ok on rentre dans \" + roomId);\n      enter(roomId);\n    });\n    socket.on(\"desc\", data => {\n      if (data.type === \"offer\" && initiator) return;\n      if (data.type === \"answer\" && !initiator) return;\n      call(data);\n    });\n    socket.on(\"disconnected\", () => {\n      console.log(\"il est parti\");\n      setInitiator(true);\n    });\n    socket.on(\"full\", () => {\n      console.log(\"c'est plein\");\n      setFull(true);\n    });\n    /*const participantConnected = participant => {\n      setParticipants(prevParticipants => [...prevParticipants, participant]);\n    };\n    const participantDisconnected = participant => {\n      setParticipants(prevParticipants =>\n        prevParticipants.filter(p => p !== participant)\n      );\n    };\n    Video.connect(token, {\n      name: roomName\n    }).then(room => {\n      setRoom(room);\n      room.on(\"participantConnected\", participantConnected);\n      room.on(\"participantDisconnected\", participantDisconnected);\n      room.participants.forEach(participantConnected);\n    });\n    return () => {\n      setRoom(currentRoom => {\n        if (currentRoom && currentRoom.localParticipant.state === \"connected\") {\n          currentRoom.localParticipant.tracks.forEach(function(\n            trackPublication\n          ) {\n            trackPublication.track.stop();\n          });\n          currentRoom.disconnect();\n          return null;\n        } else {\n          return currentRoom;\n        }\n      });\n    };*/\n  }, []);\n\n  const getUserMedia = cb => {\n    return new Promise((resolve, reject) => {\n      navigator.getUserMedia = navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n      const op = {\n        video: {\n          width: {\n            min: 160,\n            ideal: 640,\n            max: 1280\n          },\n          height: {\n            min: 120,\n            ideal: 360,\n            max: 720\n          }\n        },\n        audio: true\n      };\n      navigator.getUserMedia(op, stream => {\n        setStreamUrl(stream);\n        setLocalStream(stream);\n        setLocalVideo(stream);\n        resolve();\n      }, () => {});\n    });\n  };\n\n  const getDisplay = () => {\n    getDisplayStream().then(stream => {\n      stream.oninactive = () => {\n        this.state.peer.removeStream(this.state.localStream);\n        this.getUserMedia().then(() => {\n          this.state.peer.addStream(this.state.localStream);\n        });\n      };\n\n      this.setState({\n        streamUrl: stream,\n        localStream: stream\n      });\n      this.localVideo.srcObject = stream;\n      this.state.peer.addStream(stream);\n    });\n  };\n\n  const enter = roomId => {\n    setConnecting(true);\n    const peer = this.videoCall.init(this.state.localStream, this.state.initiator);\n    setPeer(peer);\n    peer.on(\"signal\", data => {\n      const signal = {\n        room: roomId,\n        desc: data\n      };\n      this.state.socket.emit(\"signal\", signal);\n    });\n    peer.on(\"stream\", stream => {\n      console.log(stream);\n      this.remoteVideo.srcObject = stream;\n      this.setState({\n        connecting: false,\n        waiting: false\n      });\n    });\n    peer.on(\"error\", function (err) {\n      console.log(err);\n    });\n  };\n\n  const call = otherId => {\n    this.videoCall.connect(otherId);\n  };\n\n  const renderFull = () => {\n    if (this.state.full) {\n      return \"The room is full\";\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: \"room\"\n  }, __jsx(\"h2\", null, \"Salle: \", roomId), __jsx(\"button\", {\n    onClick: handleLogout\n  }, \"D\\xE9connectation :-D\"), remoteParticipants, __jsx(\"div\", {\n    className: \"local-participant\"\n  }, room ? __jsx(Participant, {\n    isLocal: true,\n    key: room.localParticipant.sid,\n    participant: room.localParticipant\n  }) : \"\"));\n};\n\nexport default Room;","map":{"version":3,"sources":["/Users/julienjuge/DEVPERSO/video-chat/components/Room.js"],"names":["React","useEffect","useState","Participant","Video","VideoCall","getDisplayStream","io","require","socket","Room","roomId","token","handleLogout","room","setRoom","participants","setParticipants","localStream","setLocalStream","remoteStreamUrl","setRemoteStreamUrl","streamUrl","setStreamUrl","initiator","setInitiator","peer","setPeer","full","setFull","connecting","setConnecting","waiting","setWaiting","setSocket","localVideo","setLocalVideo","videoCall","remoteParticipants","map","participant","sid","getUserMedia","then","emit","on","console","log","enter","data","type","call","cb","Promise","resolve","reject","navigator","webkitGetUserMedia","mozGetUserMedia","op","video","width","min","ideal","max","height","audio","stream","getDisplay","oninactive","state","removeStream","addStream","setState","srcObject","init","signal","desc","remoteVideo","err","otherId","connect","renderFull","localParticipant"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport Participant from \"./Participant\";\nimport Video from \"twilio-video\";\nimport VideoCall from \"../helpers/simple-peer\";\nimport { getDisplayStream } from \"../helpers/media-access\";\n\nconst io = require(\"socket.io-client\");\nconst socket = io(\"http://localhost:3000\");\n\nconst Room = ({ roomId, token, handleLogout }) => {\n  const [room, setRoom] = useState(null);\n  const [participants, setParticipants] = useState([]);\n  const [localStream, setLocalStream] = useState();\n  const [remoteStreamUrl, setRemoteStreamUrl] = useState();\n  const [streamUrl, setStreamUrl] = useState();\n  const [initiator, setInitiator] = useState();\n  const [peer, setPeer] = useState();\n  const [full, setFull] = useState();\n  const [connecting, setConnecting] = useState();\n  const [waiting, setWaiting] = useState();\n  const [socket, setSocket] = useState();\n  const [localVideo, setLocalVideo] = useState();\n  const videoCall = new VideoCall();\n\n  const remoteParticipants = participants.map(participant => (\n    <Participant\n      isLocal={false}\n      key={participant.sid}\n      participant={participant}\n    />\n  ));\n\n  useEffect(() => {\n    setSocket(socket);\n\n    getUserMedia().then(() => {\n      socket.emit(\"join\", { roomId: roomId });\n    });\n    socket.on(\"init\", () => {\n      setInitiator(true);\n    });\n    socket.on(\"ready\", () => {\n      console.log(\"c'est ok on rentre dans \" + roomId);\n      enter(roomId);\n    });\n    socket.on(\"desc\", data => {\n      if (data.type === \"offer\" && initiator) return;\n      if (data.type === \"answer\" && !initiator) return;\n      call(data);\n    });\n    socket.on(\"disconnected\", () => {\n      console.log(\"il est parti\");\n      setInitiator(true);\n    });\n    socket.on(\"full\", () => {\n      console.log(\"c'est plein\");\n      setFull(true);\n    });\n\n    /*const participantConnected = participant => {\n      setParticipants(prevParticipants => [...prevParticipants, participant]);\n    };\n    const participantDisconnected = participant => {\n      setParticipants(prevParticipants =>\n        prevParticipants.filter(p => p !== participant)\n      );\n    };\n    Video.connect(token, {\n      name: roomName\n    }).then(room => {\n      setRoom(room);\n      room.on(\"participantConnected\", participantConnected);\n      room.on(\"participantDisconnected\", participantDisconnected);\n      room.participants.forEach(participantConnected);\n    });\n    return () => {\n      setRoom(currentRoom => {\n        if (currentRoom && currentRoom.localParticipant.state === \"connected\") {\n          currentRoom.localParticipant.tracks.forEach(function(\n            trackPublication\n          ) {\n            trackPublication.track.stop();\n          });\n          currentRoom.disconnect();\n          return null;\n        } else {\n          return currentRoom;\n        }\n      });\n    };*/\n  }, []);\n\n  const getUserMedia = cb => {\n    return new Promise((resolve, reject) => {\n      navigator.getUserMedia = navigator.getUserMedia =\n        navigator.getUserMedia ||\n        navigator.webkitGetUserMedia ||\n        navigator.mozGetUserMedia;\n      const op = {\n        video: {\n          width: { min: 160, ideal: 640, max: 1280 },\n          height: { min: 120, ideal: 360, max: 720 }\n        },\n        audio: true\n      };\n      navigator.getUserMedia(\n        op,\n        stream => {\n          setStreamUrl(stream);\n          setLocalStream(stream);\n          setLocalVideo(stream);\n          resolve();\n        },\n        () => {}\n      );\n    });\n  };\n  const getDisplay = () => {\n    getDisplayStream().then(stream => {\n      stream.oninactive = () => {\n        this.state.peer.removeStream(this.state.localStream);\n        this.getUserMedia().then(() => {\n          this.state.peer.addStream(this.state.localStream);\n        });\n      };\n      this.setState({ streamUrl: stream, localStream: stream });\n      this.localVideo.srcObject = stream;\n      this.state.peer.addStream(stream);\n    });\n  };\n\n  const enter = roomId => {\n    setConnecting(true);\n    const peer = this.videoCall.init(\n      this.state.localStream,\n      this.state.initiator\n    );\n    setPeer(peer);\n\n    peer.on(\"signal\", data => {\n      const signal = {\n        room: roomId,\n        desc: data\n      };\n      this.state.socket.emit(\"signal\", signal);\n    });\n    peer.on(\"stream\", stream => {\n      console.log(stream);\n      this.remoteVideo.srcObject = stream;\n      this.setState({ connecting: false, waiting: false });\n    });\n    peer.on(\"error\", function(err) {\n      console.log(err);\n    });\n  };\n  const call = otherId => {\n    this.videoCall.connect(otherId);\n  };\n  const renderFull = () => {\n    if (this.state.full) {\n      return \"The room is full\";\n    }\n  };\n\n  return (\n    <div className=\"room\">\n      <h2>Salle: {roomId}</h2>\n      <button onClick={handleLogout}>Déconnectation :-D</button>\n      {remoteParticipants}\n      <div className=\"local-participant\">\n        {room ? (\n          <Participant\n            isLocal={true}\n            key={room.localParticipant.sid}\n            participant={room.localParticipant}\n          />\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Room;\n"]},"metadata":{},"sourceType":"module"}