{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport Lobby from \"./Lobby\";\nimport Room from \"./Room\";\n\nconst VideoChat = () => {\n  const {\n    0: username,\n    1: setUsername\n  } = useState(\"\");\n  const {\n    0: roomName,\n    1: setRoomName\n  } = useState(\"\");\n  const {\n    0: token,\n    1: setToken\n  } = useState(null);\n  const handleUsernameChange = useCallback(event => {\n    setUsername(event.target.value);\n  }, []);\n  const handleRoomNameChange = useCallback(event => {\n    setRoomName(event.target.value);\n  }, []);\n  const handleSubmit = useCallback(async event => {\n    console.log(event);\n    event.preventDefault();\n    const data = await fetch(\"/api/video/token\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        identity: username,\n        room: roomName\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json());\n    setToken(data.token);\n  }, [username, roomName]);\n  const handleLogout = useCallback(event => {\n    setToken(null);\n  }, []);\n  let render;\n\n  if (token) {\n    render = __jsx(Room, {\n      roomId: roomName,\n      token: token,\n      handleLogout: handleLogout\n    });\n  } else {\n    render = __jsx(Lobby, {\n      username: username,\n      roomName: roomName,\n      handleUsernameChange: handleUsernameChange,\n      handleRoomNameChange: handleRoomNameChange,\n      handleSubmit: handleSubmit\n    });\n  }\n\n  return render;\n};\n\nexport default VideoChat;","map":{"version":3,"sources":["/Users/julienjuge/DEVPERSO/video-chat/components/VideoChat.js"],"names":["React","useCallback","useEffect","useState","Lobby","Room","VideoChat","username","setUsername","roomName","setRoomName","token","setToken","handleUsernameChange","event","target","value","handleRoomNameChange","handleSubmit","console","log","preventDefault","data","fetch","method","body","JSON","stringify","identity","room","headers","then","res","json","handleLogout","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AAEA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACtB,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BL,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAA,OAACM,QAAD;AAAA,OAAWC;AAAX,MAA0BP,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAA,OAACQ,KAAD;AAAA,OAAQC;AAAR,MAAoBT,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMU,oBAAoB,GAAGZ,WAAW,CAACa,KAAK,IAAI;AAChDN,IAAAA,WAAW,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAX;AACD,GAFuC,EAErC,EAFqC,CAAxC;AAIA,QAAMC,oBAAoB,GAAGhB,WAAW,CAACa,KAAK,IAAI;AAChDJ,IAAAA,WAAW,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAX;AACD,GAFuC,EAErC,EAFqC,CAAxC;AAIA,QAAME,YAAY,GAAGjB,WAAW,CAC9B,MAAMa,KAAN,IAAe;AACbK,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AACAA,IAAAA,KAAK,CAACO,cAAN;AACA,UAAMC,IAAI,GAAG,MAAMC,KAAK,CAAC,kBAAD,EAAqB;AAC3CC,MAAAA,MAAM,EAAE,MADmC;AAE3CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,QAAQ,EAAErB,QADS;AAEnBsB,QAAAA,IAAI,EAAEpB;AAFa,OAAf,CAFqC;AAM3CqB,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AANkC,KAArB,CAAL,CAShBC,IATgB,CASXC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EATI,CAAnB;AAUArB,IAAAA,QAAQ,CAACU,IAAI,CAACX,KAAN,CAAR;AACD,GAf6B,EAgB9B,CAACJ,QAAD,EAAWE,QAAX,CAhB8B,CAAhC;AAmBA,QAAMyB,YAAY,GAAGjC,WAAW,CAACa,KAAK,IAAI;AACxCF,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,GAF+B,EAE7B,EAF6B,CAAhC;AAIA,MAAIuB,MAAJ;;AACA,MAAIxB,KAAJ,EAAW;AACTwB,IAAAA,MAAM,GACJ,MAAC,IAAD;AAAM,MAAA,MAAM,EAAE1B,QAAd;AAAwB,MAAA,KAAK,EAAEE,KAA/B;AAAsC,MAAA,YAAY,EAAEuB;AAApD,MADF;AAGD,GAJD,MAIO;AACLC,IAAAA,MAAM,GACJ,MAAC,KAAD;AACE,MAAA,QAAQ,EAAE5B,QADZ;AAEE,MAAA,QAAQ,EAAEE,QAFZ;AAGE,MAAA,oBAAoB,EAAEI,oBAHxB;AAIE,MAAA,oBAAoB,EAAEI,oBAJxB;AAKE,MAAA,YAAY,EAAEC;AALhB,MADF;AASD;;AACD,SAAOiB,MAAP;AACD,CArDD;;AAuDA,eAAe7B,SAAf","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\n\nimport Lobby from \"./Lobby\";\nimport Room from \"./Room\";\n\nconst VideoChat = () => {\n  const [username, setUsername] = useState(\"\");\n  const [roomName, setRoomName] = useState(\"\");\n  const [token, setToken] = useState(null);\n\n  const handleUsernameChange = useCallback(event => {\n    setUsername(event.target.value);\n  }, []);\n\n  const handleRoomNameChange = useCallback(event => {\n    setRoomName(event.target.value);\n  }, []);\n\n  const handleSubmit = useCallback(\n    async event => {\n      console.log(event);\n      event.preventDefault();\n      const data = await fetch(\"/api/video/token\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          identity: username,\n          room: roomName\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(res => res.json());\n      setToken(data.token);\n    },\n    [username, roomName]\n  );\n\n  const handleLogout = useCallback(event => {\n    setToken(null);\n  }, []);\n\n  let render;\n  if (token) {\n    render = (\n      <Room roomId={roomName} token={token} handleLogout={handleLogout} />\n    );\n  } else {\n    render = (\n      <Lobby\n        username={username}\n        roomName={roomName}\n        handleUsernameChange={handleUsernameChange}\n        handleRoomNameChange={handleRoomNameChange}\n        handleSubmit={handleSubmit}\n      />\n    );\n  }\n  return render;\n};\n\nexport default VideoChat;\n"]},"metadata":{},"sourceType":"module"}