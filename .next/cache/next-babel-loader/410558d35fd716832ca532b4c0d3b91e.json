{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Participant from \"./Participant\";\nimport Video from \"twilio-video\";\nimport VideoCall from \"../helpers/simple-peer\";\nimport { getDisplayStream } from \"../helpers/media-access\";\n\nconst io = require(\"socket.io-client\");\n\nconst socket = io(process.env.reactAppSignalingServer);\n\nconst Room = ({\n  username,\n  roomId,\n  token,\n  handleLogout\n}) => {\n  const {\n    0: room,\n    1: setRoom\n  } = useState(null);\n  const {\n    0: participants,\n    1: setParticipants\n  } = useState([]);\n  const {\n    0: localStream,\n    1: setLocalStream\n  } = useState();\n  const {\n    0: remoteStreamUrl,\n    1: setRemoteStreamUrl\n  } = useState([]);\n  const {\n    0: streamUrl,\n    1: setStreamUrl\n  } = useState();\n  const {\n    0: initiator,\n    1: setInitiator\n  } = useState();\n  const {\n    0: peer,\n    1: setPeer\n  } = useState();\n  const {\n    0: full,\n    1: setFull\n  } = useState();\n  const {\n    0: connecting,\n    1: setConnecting\n  } = useState();\n  const {\n    0: waiting,\n    1: setWaiting\n  } = useState();\n  const {\n    0: localVideo,\n    1: setLocalVideo\n  } = useState();\n  const {\n    0: audioEnabled,\n    1: setAudioEnabled\n  } = useState(false);\n  const {\n    0: videoEnabled,\n    1: setVideoEnabled\n  } = useState(true);\n  const {\n    0: peers,\n    1: setPeers\n  } = useState([]);\n  const videoCall = new VideoCall();\n  const videoRef = useRef();\n  const audioRef = useRef();\n  const remoteParticipants = participants.map(participant => __jsx(Participant, {\n    isLocal: false,\n    key: participant.sid,\n    participant: participant\n  }));\n  useEffect(() => {\n    console.log(socket);\n    getUserMedia().then(() => {\n      console.log(\"join\");\n      socket.emit(\"join\", {\n        roomId: roomId\n      });\n      console.log(\"emit join\");\n    });\n    socket.on(\"peer\", msg => {\n      const peerId = msg.peerId;\n      var peer = new SimplePeer({\n        initiator: true,\n        stream: localStream\n      });\n      hub.setPeer(peerId, peer);\n      peer.on(\"signal\", function (data) {\n        hub.send(peerId, \"signal\", data);\n      });\n      createPeer(peerId, peer); //createPeer(peerId, true, streamUrl);\n    });\n    socket.on(\"init\", () => {\n      console.log(\"init\");\n      setInitiator(true);\n    });\n    socket.on(\"ready\", () => {\n      console.log(\"c'est ok on rentre dans \" + roomId); //enter(roomId);\n    });\n    socket.on(\"desc\", data => {\n      console.log(\"desc\");\n      if (data.type === \"offer\" && initiator) return;\n      if (data.type === \"answer\" && !initiator) return;\n      call(data);\n    });\n    socket.on(\"disconnected\", () => {\n      console.log(\"il est parti\");\n      setInitiator(true);\n    });\n    socket.on(\"full\", () => {\n      console.log(\"c'est plein\");\n      setFull(true);\n    });\n    /*const participantConnected = participant => {\n      setParticipants(prevParticipants => [...prevParticipants, participant]);\n    };\n    const participantDisconnected = participant => {\n      setParticipants(prevParticipants =>\n        prevParticipants.filter(p => p !== participant)\n      );\n    };\n    Video.connect(token, {\n      name: roomName\n    }).then(room => {\n      setRoom(room);\n      room.on(\"participantConnected\", participantConnected);\n      room.on(\"participantDisconnected\", participantDisconnected);\n      room.participants.forEach(participantConnected);\n    });\n    return () => {\n      setRoom(currentRoom => {\n        if (currentRoom && currentRoom.localParticipant.state === \"connected\") {\n          currentRoom.localParticipant.tracks.forEach(function(\n            trackPublication\n          ) {\n            trackPublication.track.stop();\n          });\n          currentRoom.disconnect();\n          return null;\n        } else {\n          return currentRoom;\n        }\n      });\n    };*/\n  }, []);\n  /*const setPeerState = (peerId, peer) => {\n    console.log(peerId);\n    console.log(peer);\n    const peers = { ...peers };\n    peers[peerId] = peer;\n    setPeers(peers);\n  };\n   const renderPeers = () => {\n    return Object.entries(peers).map(entry => {\n      const [peerId, peer] = entry;\n      console.log(peer.video);\n    });\n  };*/\n\n  const createPeer = (peerId, peer) => {\n    peer.peerid = peerid; // you can choose to skip this\n    //debugger;\n\n    peer.on(\"connect\", function () {\n      console.log(\"CONNECT\");\n      peer.send(\"call established .. \" + selfID);\n    });\n    peer.on(\"error\", function (err) {\n      console.log(\"error\", err);\n    });\n    peer.on(\"data\", function (data) {\n      console.log(\"data: \" + data);\n    });\n    peer.on(\"stream\", function (stream) {\n      console.log(\"new stream arrived .. \", this.peerid); // createRemoteVideoElement(peerid, stream);\n    });\n    peer.on(\"track\", function (track, stream) {\n      console.log(\"new track arrived .. \", this.peerid); //createRemoteVideoTrackElement(peerid, track, stream);\n    });\n    peer.on(\"removestream\", function (stream) {\n      //removeRemoteVideoElement(peerid);\n      console.log(\"stream removed .. \", peerid); // hardly called\n    });\n    peer.on(\"close\", function () {\n      console.log(\"connection closed .. \", peerid); //removeRemoteVideoElement(peerid);\n    });\n  };\n\n  const getUserMedia = cb => {\n    return new Promise((resolve, reject) => {\n      navigator.getUserMedia = navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n      const op = {\n        audio: true,\n        video: true\n      };\n      navigator.getUserMedia(op, stream => {\n        console.log(op);\n        console.log(stream);\n        setStreamUrl(stream);\n        setLocalStream(stream);\n        setLocalVideo(stream);\n        videoRef.current.srcObject = stream; //stream.srcObject.attach(videoRef);\n\n        resolve();\n      }, () => {});\n    });\n  };\n\n  const getDisplay = () => {\n    getDisplayStream().then(stream => {\n      stream.oninactive = () => {\n        this.state.peer.removeStream(this.state.localStream);\n        this.getUserMedia().then(() => {\n          this.state.peer.addStream(this.state.localStream);\n        });\n      };\n\n      setStreamUrl(stream);\n      setLocalStream(stream);\n      localVideo.srcObject = stream;\n      peer.addStream(stream);\n    });\n  };\n  /*const enter = roomId => {\n    console.log(roomId);\n    console.log(\"enter\");\n    setConnecting(true);\n    const peer = videoCall.init(localStream, initiator);\n    console.log(peer);\n    setPeer({ peer });\n     /*peer.on(\"signal\", data => {\n      console.log(\"signal\");\n      const signal = {\n        room: roomId,\n        desc: data\n      };\n      socket.emit(\"signal\", signal);\n    });\n    peer.on(\"stream\", stream => {\n      console.log(\"stream\");\n       remoteStreamUrl.push(stream);\n       //remoteVideo.srcObject = stream;\n      setConnecting(false);\n      setWaiting(false);\n    });\n    peer.on(\"error\", function(err) {\n      console.log(err);\n    });\n  };*/\n\n\n  const call = otherId => {\n    videoCall.connect(otherId);\n  };\n\n  const renderFull = () => {\n    if (this.state.full) {\n      return \"The room is full\";\n    }\n  };\n\n  const disableVideo = () => {\n    const videoTrack = localStream.getVideoTracks()[0];\n\n    if (localStream) {\n      videoTrack.enabled = false;\n      setVideoEnabled(false);\n    }\n  };\n\n  const enableVideo = () => {\n    const videoTrack = localStream.getVideoTracks()[0];\n\n    if (localStream) {\n      videoTrack.enabled = true;\n      setVideoEnabled(true);\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: \"room\"\n  }, __jsx(\"h2\", null, \"Salle: \", roomId), connecting && __jsx(\"div\", null, __jsx(\"p\", null, \"Establishing connection...\")), waiting && __jsx(\"div\", null, __jsx(\"p\", null, \"Waiting for someone...\")), __jsx(\"button\", {\n    onClick: handleLogout\n  }, \"D\\xE9connectation :-D\"), __jsx(\"div\", {\n    className: \"local-participant\"\n  }, localStream !== undefined ? __jsx(Participant, {\n    isLocal: true,\n    key: localStream.id,\n    name: username,\n    video: __jsx(\"div\", null, __jsx(\"video\", {\n      ref: videoRef,\n      autoPlay: true,\n      muted: !audioEnabled\n    })),\n    setAudioEnabled: setAudioEnabled,\n    audioEnabled: audioEnabled,\n    disableVideo: disableVideo,\n    enableVideo: enableVideo,\n    videoEnabled: videoEnabled,\n    videoEnabled: videoEnabled\n  }) : \"\"));\n};\n\nexport default Room;","map":{"version":3,"sources":["/Users/julienjuge/DEVPERSO/video-chat/components/Room.js"],"names":["React","useEffect","useRef","useState","Participant","Video","VideoCall","getDisplayStream","io","require","socket","process","env","reactAppSignalingServer","Room","username","roomId","token","handleLogout","room","setRoom","participants","setParticipants","localStream","setLocalStream","remoteStreamUrl","setRemoteStreamUrl","streamUrl","setStreamUrl","initiator","setInitiator","peer","setPeer","full","setFull","connecting","setConnecting","waiting","setWaiting","localVideo","setLocalVideo","audioEnabled","setAudioEnabled","videoEnabled","setVideoEnabled","peers","setPeers","videoCall","videoRef","audioRef","remoteParticipants","map","participant","sid","console","log","getUserMedia","then","emit","on","msg","peerId","SimplePeer","stream","hub","data","send","createPeer","type","call","peerid","selfID","err","track","cb","Promise","resolve","reject","navigator","webkitGetUserMedia","mozGetUserMedia","op","audio","video","current","srcObject","getDisplay","oninactive","state","removeStream","addStream","otherId","connect","renderFull","disableVideo","videoTrack","getVideoTracks","enabled","enableVideo","undefined","id"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\nimport Participant from \"./Participant\";\nimport Video from \"twilio-video\";\nimport VideoCall from \"../helpers/simple-peer\";\nimport { getDisplayStream } from \"../helpers/media-access\";\n\nconst io = require(\"socket.io-client\");\nconst socket = io(process.env.reactAppSignalingServer);\n\nconst Room = ({ username, roomId, token, handleLogout }) => {\n  const [room, setRoom] = useState(null);\n  const [participants, setParticipants] = useState([]);\n  const [localStream, setLocalStream] = useState();\n  const [remoteStreamUrl, setRemoteStreamUrl] = useState([]);\n  const [streamUrl, setStreamUrl] = useState();\n  const [initiator, setInitiator] = useState();\n  const [peer, setPeer] = useState();\n  const [full, setFull] = useState();\n  const [connecting, setConnecting] = useState();\n  const [waiting, setWaiting] = useState();\n  const [localVideo, setLocalVideo] = useState();\n  const [audioEnabled, setAudioEnabled] = useState(false);\n  const [videoEnabled, setVideoEnabled] = useState(true);\n  const [peers, setPeers] = useState([]);\n\n  const videoCall = new VideoCall();\n  const videoRef = useRef();\n  const audioRef = useRef();\n\n  const remoteParticipants = participants.map(participant => (\n    <Participant\n      isLocal={false}\n      key={participant.sid}\n      participant={participant}\n    />\n  ));\n\n  useEffect(() => {\n    console.log(socket);\n\n    getUserMedia().then(() => {\n      console.log(\"join\");\n      socket.emit(\"join\", { roomId: roomId });\n\n      console.log(\"emit join\");\n    });\n    socket.on(\"peer\", msg => {\n      const peerId = msg.peerId;\n      var peer = new SimplePeer({ initiator: true, stream: localStream });\n\n      hub.setPeer(peerId, peer);\n\n      peer.on(\"signal\", function(data) {\n        hub.send(peerId, \"signal\", data);\n      });\n\n      createPeer(peerId, peer);\n\n      //createPeer(peerId, true, streamUrl);\n    });\n    socket.on(\"init\", () => {\n      console.log(\"init\");\n      setInitiator(true);\n    });\n    socket.on(\"ready\", () => {\n      console.log(\"c'est ok on rentre dans \" + roomId);\n      //enter(roomId);\n    });\n    socket.on(\"desc\", data => {\n      console.log(\"desc\");\n      if (data.type === \"offer\" && initiator) return;\n      if (data.type === \"answer\" && !initiator) return;\n      call(data);\n    });\n    socket.on(\"disconnected\", () => {\n      console.log(\"il est parti\");\n      setInitiator(true);\n    });\n    socket.on(\"full\", () => {\n      console.log(\"c'est plein\");\n      setFull(true);\n    });\n\n    /*const participantConnected = participant => {\n      setParticipants(prevParticipants => [...prevParticipants, participant]);\n    };\n    const participantDisconnected = participant => {\n      setParticipants(prevParticipants =>\n        prevParticipants.filter(p => p !== participant)\n      );\n    };\n    Video.connect(token, {\n      name: roomName\n    }).then(room => {\n      setRoom(room);\n      room.on(\"participantConnected\", participantConnected);\n      room.on(\"participantDisconnected\", participantDisconnected);\n      room.participants.forEach(participantConnected);\n    });\n    return () => {\n      setRoom(currentRoom => {\n        if (currentRoom && currentRoom.localParticipant.state === \"connected\") {\n          currentRoom.localParticipant.tracks.forEach(function(\n            trackPublication\n          ) {\n            trackPublication.track.stop();\n          });\n          currentRoom.disconnect();\n          return null;\n        } else {\n          return currentRoom;\n        }\n      });\n    };*/\n  }, []);\n\n  /*const setPeerState = (peerId, peer) => {\n    console.log(peerId);\n    console.log(peer);\n    const peers = { ...peers };\n    peers[peerId] = peer;\n    setPeers(peers);\n  };\n\n  const renderPeers = () => {\n    return Object.entries(peers).map(entry => {\n      const [peerId, peer] = entry;\n      console.log(peer.video);\n    });\n  };*/\n\n  const createPeer = (peerId, peer) => {\n    peer.peerid = peerid; // you can choose to skip this\n\n    //debugger;\n\n    peer.on(\"connect\", function() {\n      console.log(\"CONNECT\");\n      peer.send(\"call established .. \" + selfID);\n    });\n\n    peer.on(\"error\", function(err) {\n      console.log(\"error\", err);\n    });\n\n    peer.on(\"data\", function(data) {\n      console.log(\"data: \" + data);\n    });\n\n    peer.on(\"stream\", function(stream) {\n      console.log(\"new stream arrived .. \", this.peerid);\n\n      // createRemoteVideoElement(peerid, stream);\n    });\n\n    peer.on(\"track\", function(track, stream) {\n      console.log(\"new track arrived .. \", this.peerid);\n\n      //createRemoteVideoTrackElement(peerid, track, stream);\n    });\n\n    peer.on(\"removestream\", function(stream) {\n      //removeRemoteVideoElement(peerid);\n      console.log(\"stream removed .. \", peerid); // hardly called\n    });\n\n    peer.on(\"close\", function() {\n      console.log(\"connection closed .. \", peerid);\n      //removeRemoteVideoElement(peerid);\n    });\n  };\n\n  const getUserMedia = cb => {\n    return new Promise((resolve, reject) => {\n      navigator.getUserMedia = navigator.getUserMedia =\n        navigator.getUserMedia ||\n        navigator.webkitGetUserMedia ||\n        navigator.mozGetUserMedia;\n      const op = {\n        audio: true,\n        video: true\n      };\n      navigator.getUserMedia(\n        op,\n        stream => {\n          console.log(op);\n          console.log(stream);\n          setStreamUrl(stream);\n          setLocalStream(stream);\n          setLocalVideo(stream);\n          videoRef.current.srcObject = stream;\n\n          //stream.srcObject.attach(videoRef);\n          resolve();\n        },\n        () => {}\n      );\n    });\n  };\n  const getDisplay = () => {\n    getDisplayStream().then(stream => {\n      stream.oninactive = () => {\n        this.state.peer.removeStream(this.state.localStream);\n        this.getUserMedia().then(() => {\n          this.state.peer.addStream(this.state.localStream);\n        });\n      };\n      setStreamUrl(stream);\n      setLocalStream(stream);\n      localVideo.srcObject = stream;\n      peer.addStream(stream);\n    });\n  };\n\n  /*const enter = roomId => {\n    console.log(roomId);\n    console.log(\"enter\");\n    setConnecting(true);\n    const peer = videoCall.init(localStream, initiator);\n    console.log(peer);\n    setPeer({ peer });\n\n    /*peer.on(\"signal\", data => {\n      console.log(\"signal\");\n      const signal = {\n        room: roomId,\n        desc: data\n      };\n      socket.emit(\"signal\", signal);\n    });\n    peer.on(\"stream\", stream => {\n      console.log(\"stream\");\n\n      remoteStreamUrl.push(stream);\n\n      //remoteVideo.srcObject = stream;\n      setConnecting(false);\n      setWaiting(false);\n    });\n    peer.on(\"error\", function(err) {\n      console.log(err);\n    });\n  };*/\n  const call = otherId => {\n    videoCall.connect(otherId);\n  };\n  const renderFull = () => {\n    if (this.state.full) {\n      return \"The room is full\";\n    }\n  };\n\n  const disableVideo = () => {\n    const videoTrack = localStream.getVideoTracks()[0];\n\n    if (localStream) {\n      videoTrack.enabled = false;\n      setVideoEnabled(false);\n    }\n  };\n\n  const enableVideo = () => {\n    const videoTrack = localStream.getVideoTracks()[0];\n\n    if (localStream) {\n      videoTrack.enabled = true;\n      setVideoEnabled(true);\n    }\n  };\n\n  return (\n    <div className=\"room\">\n      <h2>Salle: {roomId}</h2>\n      {connecting && (\n        <div>\n          <p>Establishing connection...</p>\n        </div>\n      )}\n      {waiting && (\n        <div>\n          <p>Waiting for someone...</p>\n        </div>\n      )}\n      <button onClick={handleLogout}>Déconnectation :-D</button>\n\n      <div className=\"local-participant\">\n        {localStream !== undefined ? (\n          <Participant\n            isLocal={true}\n            key={localStream.id}\n            name={username}\n            video={\n              <div>\n                <video ref={videoRef} autoPlay={true} muted={!audioEnabled} />\n              </div>\n            }\n            setAudioEnabled={setAudioEnabled}\n            audioEnabled={audioEnabled}\n            disableVideo={disableVideo}\n            enableVideo={enableVideo}\n            videoEnabled={videoEnabled}\n            videoEnabled={videoEnabled}\n          />\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Room;\n"]},"metadata":{},"sourceType":"module"}