{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/julienjuge/DEVPERSO/video-chat/components/Room.js\";\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport Participant from \"./Participant\";\nimport Video from \"twilio-video\";\nimport VideoCall from \"../helpers/simple-peer\";\nimport { getDisplayStream } from \"../helpers/media-access\";\nimport io from \"socket.io-client\";\n\nvar Room = function Room(_ref) {\n  var roomId = _ref.roomId,\n      token = _ref.token,\n      handleLogout = _ref.handleLogout;\n\n  var _useState = useState(null),\n      room = _useState[0],\n      setRoom = _useState[1];\n\n  var _useState2 = useState([]),\n      participants = _useState2[0],\n      setParticipants = _useState2[1];\n\n  var _useState3 = useState(),\n      localStream = _useState3[0],\n      setLocalStream = _useState3[1];\n\n  var _useState4 = useState(),\n      remoteStreamUrl = _useState4[0],\n      setRemoteStreamUrl = _useState4[1];\n\n  var _useState5 = useState(),\n      streamUrl = _useState5[0],\n      setStreamUrl = _useState5[1];\n\n  var _useState6 = useState(),\n      initiator = _useState6[0],\n      setInitiator = _useState6[1];\n\n  var _useState7 = useState(),\n      peer = _useState7[0],\n      setPeer = _useState7[1];\n\n  var _useState8 = useState(),\n      full = _useState8[0],\n      setFull = _useState8[1];\n\n  var _useState9 = useState(),\n      connecting = _useState9[0],\n      setConnecting = _useState9[1];\n\n  var _useState10 = useState(),\n      waiting = _useState10[0],\n      setWaiting = _useState10[1];\n\n  var _useState11 = useState(),\n      socket = _useState11[0],\n      setSocket = _useState11[1];\n\n  var videoCall = new VideoCall();\n  var remoteParticipants = participants.map(function (participant) {\n    return __jsx(Participant, {\n      isLocal: false,\n      key: participant.sid,\n      participant: participant,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 5\n      }\n    });\n  });\n  useEffect(function () {\n    var socket = io(process.env.reactAppSignalingServer);\n    setSocket(socket);\n    getUserMedia().then(function () {\n      socket.emit(\"join\", {\n        roomId: roomId\n      });\n    });\n    socket.on(\"init\", function () {\n      setInitiator(true);\n    });\n    socket.on(\"ready\", function () {\n      console.log(\"c'est ok on rentre dans \" + roomId);\n      enter(roomId);\n    });\n    socket.on(\"desc\", function (data) {\n      if (data.type === \"offer\" && initiator) return;\n      if (data.type === \"answer\" && !initiator) return;\n      call(data);\n    });\n    socket.on(\"disconnected\", function () {\n      console.log(\"il est parti\");\n      setInitiator(true);\n    });\n    socket.on(\"full\", function () {\n      console.log(\"c'est plein\");\n      setFull(true);\n    });\n    /*const participantConnected = participant => {\n      setParticipants(prevParticipants => [...prevParticipants, participant]);\n    };\n    const participantDisconnected = participant => {\n      setParticipants(prevParticipants =>\n        prevParticipants.filter(p => p !== participant)\n      );\n    };\n    Video.connect(token, {\n      name: roomName\n    }).then(room => {\n      setRoom(room);\n      room.on(\"participantConnected\", participantConnected);\n      room.on(\"participantDisconnected\", participantDisconnected);\n      room.participants.forEach(participantConnected);\n    });\n    return () => {\n      setRoom(currentRoom => {\n        if (currentRoom && currentRoom.localParticipant.state === \"connected\") {\n          currentRoom.localParticipant.tracks.forEach(function(\n            trackPublication\n          ) {\n            trackPublication.track.stop();\n          });\n          currentRoom.disconnect();\n          return null;\n        } else {\n          return currentRoom;\n        }\n      });\n    };*/\n  }, []);\n\n  var enter = function enter(roomId) {\n    setConnecting(true);\n\n    var peer = _this.videoCall.init(_this.state.localStream, _this.state.initiator);\n\n    setPeer(peer);\n    peer.on(\"signal\", function (data) {\n      var signal = {\n        room: roomId,\n        desc: data\n      };\n\n      _this.state.socket.emit(\"signal\", signal);\n    });\n    peer.on(\"stream\", function (stream) {\n      console.log(stream);\n      _this.remoteVideo.srcObject = stream;\n\n      _this.setState({\n        connecting: false,\n        waiting: false\n      });\n    });\n    peer.on(\"error\", function (err) {\n      console.log(err);\n    });\n  };\n\n  var call = function call(otherId) {\n    _this.videoCall.connect(otherId);\n  };\n\n  var renderFull = function renderFull() {\n    if (_this.state.full) {\n      return \"The room is full\";\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: \"room\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }, __jsx(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, \"Salle: \", roomId), __jsx(\"button\", {\n    onClick: handleLogout,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, \"D\\xE9connectation :-D\"), remoteParticipants, __jsx(\"div\", {\n    className: \"local-participant\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, room ? __jsx(Participant, {\n    isLocal: true,\n    key: room.localParticipant.sid,\n    participant: room.localParticipant,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }) : \"\"));\n};\n\nexport default Room;","map":{"version":3,"sources":["/Users/julienjuge/DEVPERSO/video-chat/components/Room.js"],"names":["React","useEffect","useState","Participant","Video","VideoCall","getDisplayStream","io","Room","roomId","token","handleLogout","room","setRoom","participants","setParticipants","localStream","setLocalStream","remoteStreamUrl","setRemoteStreamUrl","streamUrl","setStreamUrl","initiator","setInitiator","peer","setPeer","full","setFull","connecting","setConnecting","waiting","setWaiting","socket","setSocket","videoCall","remoteParticipants","map","participant","sid","process","env","reactAppSignalingServer","getUserMedia","then","emit","on","console","log","enter","data","type","call","init","state","signal","desc","stream","remoteVideo","srcObject","setState","err","otherId","connect","renderFull","localParticipant"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport Participant from \"./Participant\";\nimport Video from \"twilio-video\";\nimport VideoCall from \"../helpers/simple-peer\";\nimport { getDisplayStream } from \"../helpers/media-access\";\nimport io from \"socket.io-client\";\n\nconst Room = ({ roomId, token, handleLogout }) => {\n  const [room, setRoom] = useState(null);\n  const [participants, setParticipants] = useState([]);\n  const [localStream, setLocalStream] = useState();\n  const [remoteStreamUrl, setRemoteStreamUrl] = useState();\n  const [streamUrl, setStreamUrl] = useState();\n  const [initiator, setInitiator] = useState();\n  const [peer, setPeer] = useState();\n  const [full, setFull] = useState();\n  const [connecting, setConnecting] = useState();\n  const [waiting, setWaiting] = useState();\n  const [socket, setSocket] = useState();\n  const videoCall = new VideoCall();\n\n  const remoteParticipants = participants.map(participant => (\n    <Participant\n      isLocal={false}\n      key={participant.sid}\n      participant={participant}\n    />\n  ));\n\n  useEffect(() => {\n    const socket = io(process.env.reactAppSignalingServer);\n\n    setSocket(socket);\n\n    getUserMedia().then(() => {\n      socket.emit(\"join\", { roomId: roomId });\n    });\n    socket.on(\"init\", () => {\n      setInitiator(true);\n    });\n    socket.on(\"ready\", () => {\n      console.log(\"c'est ok on rentre dans \" + roomId);\n      enter(roomId);\n    });\n    socket.on(\"desc\", data => {\n      if (data.type === \"offer\" && initiator) return;\n      if (data.type === \"answer\" && !initiator) return;\n      call(data);\n    });\n    socket.on(\"disconnected\", () => {\n      console.log(\"il est parti\");\n      setInitiator(true);\n    });\n    socket.on(\"full\", () => {\n      console.log(\"c'est plein\");\n      setFull(true);\n    });\n\n    /*const participantConnected = participant => {\n      setParticipants(prevParticipants => [...prevParticipants, participant]);\n    };\n    const participantDisconnected = participant => {\n      setParticipants(prevParticipants =>\n        prevParticipants.filter(p => p !== participant)\n      );\n    };\n    Video.connect(token, {\n      name: roomName\n    }).then(room => {\n      setRoom(room);\n      room.on(\"participantConnected\", participantConnected);\n      room.on(\"participantDisconnected\", participantDisconnected);\n      room.participants.forEach(participantConnected);\n    });\n    return () => {\n      setRoom(currentRoom => {\n        if (currentRoom && currentRoom.localParticipant.state === \"connected\") {\n          currentRoom.localParticipant.tracks.forEach(function(\n            trackPublication\n          ) {\n            trackPublication.track.stop();\n          });\n          currentRoom.disconnect();\n          return null;\n        } else {\n          return currentRoom;\n        }\n      });\n    };*/\n  }, []);\n\n  const enter = roomId => {\n    setConnecting(true);\n    const peer = this.videoCall.init(\n      this.state.localStream,\n      this.state.initiator\n    );\n    setPeer(peer);\n\n    peer.on(\"signal\", data => {\n      const signal = {\n        room: roomId,\n        desc: data\n      };\n      this.state.socket.emit(\"signal\", signal);\n    });\n    peer.on(\"stream\", stream => {\n      console.log(stream);\n      this.remoteVideo.srcObject = stream;\n      this.setState({ connecting: false, waiting: false });\n    });\n    peer.on(\"error\", function(err) {\n      console.log(err);\n    });\n  };\n  const call = otherId => {\n    this.videoCall.connect(otherId);\n  };\n  const renderFull = () => {\n    if (this.state.full) {\n      return \"The room is full\";\n    }\n  };\n\n  return (\n    <div className=\"room\">\n      <h2>Salle: {roomId}</h2>\n      <button onClick={handleLogout}>Déconnectation :-D</button>\n      {remoteParticipants}\n      <div className=\"local-participant\">\n        {room ? (\n          <Participant\n            isLocal={true}\n            key={room.localParticipant.sid}\n            participant={room.localParticipant}\n          />\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Room;\n"]},"metadata":{},"sourceType":"module"}